head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2008.01.29.19.31.02;	author -;	state -;
branches;
next	1.8;

1.8
date	2008.01.29.19.30.09;	author -;	state -;
branches;
next	1.7;

1.7
date	2008.01.29.19.29.12;	author -;	state -;
branches;
next	1.6;

1.6
date	2008.01.29.19.28.04;	author -;	state -;
branches;
next	1.5;

1.5
date	2008.01.29.19.26.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2008.01.29.19.25.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2008.01.29.01.54.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2008.01.29.01.53.37;	author -;	state -;
branches;
next	1.1;

1.1
date	2008.01.29.01.51.40;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: box.cc,v 1.3 2008/01/29 01:54:30 - - $
//
// NAME
//    box-item - illustrate simple container class
//
// DESCRIPTION
//    Creates boxes, puts and gets.
//    Shows the four default members being supplied.
//    Everything is in one file for convenience.
//    See comments for names of actual files.
//

#include <cstdlib>
#include <iostream>
#include <string>

using namespace std;

/////////////////////////////////////////////////////////////////
//
// box.h
//
/////////////////////////////////////////////////////////////////

template <class item_t>
class box {
      template <typename item_t>
      friend ostream &operator<< (ostream &out,
                  const box<item_t> &that);
   private:
      item_t item;
      box () {}; // Disabled, because no universal default value
   public:
      box (const box &that): item (that.item) {};
      box &operator= (const box that);
      ~box () {};
      // Note we omit explicit here, to allow implicit conv.
      box (item_t item): item(item) {};
      item_t get ();
      void put (item_t item);
};

/////////////////////////////////////////////////////////////////
//
// box.cc
//
/////////////////////////////////////////////////////////////////

template <class item_t>
box<item_t> &box<item_t> ::operator= (const box that) {
   if (this == &that) return *this;
   this->item = that.item;
};

template <class item_t>
item_t box<item_t> ::get (){
   return item;
};

template<class item_t>
void box<item_t> ::put (item_t newitem){
   item = newitem;
};

template <typename type>
ostream &operator<< (ostream &out, const box<type> &that){
   return out << "box[" << that.item << "]";
};

/////////////////////////////////////////////////////////////////
//
// main.cc
//
/////////////////////////////////////////////////////////////////

int main (int argc, char **argv) {
   box<int> b = 0;
   cout << "line 1: " << b.get () << endl;
   b.put (3);
   cout << "line 2: " << b.get () << endl;
   box<string> s = string ("");
   cout << "line 3: " << s.get () << endl;
   s.put ("foobar");
   cout << "line 4: " << s.get () << endl;
   box<string> t = s;
   cout << "line 5: " << t.get () << endl;
   box<string> u = string ("quux");
   u = s;
   cout << "line 6: " << u.get () << endl;
   cout << endl << "line 7: " << b << s << t << u << endl;
   return EXIT_SUCCESS;
};
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 1.5 2008-01-29 11:26:52-08 - - $
d25 1
a25 1
template <class item_t, item_t zero>
d32 1
a33 1
      box (): item (zero) {};
d49 2
a50 2
template <class item_t, item_t zero>
box<item_t, zero> &box<item_t, zero> ::operator= (const box that) {
d55 2
a56 2
template <class item_t, item_t zero>
item_t box<item_t, zero> ::get (){
d60 2
a61 2
template<class item_t, item_t zero>
void box<item_t, zero> ::put (item_t newitem){
d65 2
a66 2
template <typename item_t, item_t zero>
ostream &operator<< (ostream &out, const box<item_t, zero> &that){
d77 1
a77 1
   box<int, 0> b = 0;
d81 1
a81 2
   const string empty = "";
   box<string, empty> s = string ("");
d85 1
a85 1
   box<string, empty> t = s;
d87 1
a87 1
   box<string, empty> u = string ("quux");
@


1.7
log
@-
@
text
@d81 2
a82 1
   box<string, string ("")> s = string ("");
d86 1
a86 1
   box<string, string ("")> t = s;
d88 1
a88 1
   box<string, string ("")> u = string ("quux");
@


1.6
log
@-
@
text
@d81 1
a81 1
   box<string, ""> s = string ("");
d85 1
a85 1
   box<string, ""> t = s;
d87 1
a87 1
   box<string, ""> u = string ("quux");
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 1.4 2008-01-29 11:25:04-08 - - $
d65 2
a66 2
template <typename type>
ostream &operator<< (ostream &out, const box<type> &that){
d77 1
a77 1
   box<int> b = 0;
d81 1
a81 1
   box<string> s = string ("");
d85 1
a85 1
   box<string> t = s;
d87 1
a87 1
   box<string> u = string ("quux");
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 1.3 2008-01-28 17:54:30-08 - - $
d49 2
a50 2
template <class item_t>
box<item_t> &box<item_t> ::operator= (const box that) {
d55 2
a56 2
template <class item_t>
item_t box<item_t> ::get (){
d60 2
a61 2
template<class item_t>
void box<item_t> ::put (item_t newitem){
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 1.2 2008-01-28 17:53:37-08 - - $
d25 1
a25 1
template <class item_t>
a31 1
      box () {}; // Disabled, because no universal default value
d33 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 1.1 2008-01-28 17:51:40-08 - - $
d32 1
a33 1
      box (): item (0) {};
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: box.cc,v 352.21 2008-01-28 17:46:50-08 - - $
d29 1
a29 1
                  const box <item_t> &that);
d37 2
a38 1
      explicit box (item_t item): item(item) {};
d50 1
a50 1
box <item_t> &box <item_t> ::operator= (const box that) {
d56 1
a56 1
item_t box <item_t> ::get (){
d60 2
a61 2
template <class item_t>
void box <item_t> ::put (item_t newitem){
d66 1
a66 1
ostream &operator<< (ostream &out, const box <type> &that){
d77 1
a77 1
   box <int> b = 0;
d81 1
a81 1
   box <string> s = string ("");
d85 1
a85 1
   box <string> t = s;
d87 1
a87 1
   box <string> u = string ("quux");
@

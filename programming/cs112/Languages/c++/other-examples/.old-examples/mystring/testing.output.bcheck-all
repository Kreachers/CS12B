Reading testing
Reading ld.so.1
Reading librtc.so
Reading libCrun.so.1
Reading libm.so.1
Reading libw.so.1
Reading libc.so.1
Reading libdl.so.1
Reading libc_psr.so.1
access checking - ON
memuse checking - ON
Running: testing 
(process id 5423)
RTC: Enabling Error Checking...
RTC: Running program...
Running /afs/cats.ucsc.edu/courses/cmps112-wm/Handouts/C++/Examples/mystring/testing
$Id: teststring.cc,v 330.6 2003-01-23 20:56:51-08 - - $

------------------------------------------------------------------------
DEBUG: teststring.cc:26: mystring s1;
mystring::mystring():
(mystring*)@ffbef4cc -> 
        dim=128
        len=0
        buf@b5380 -> []
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:27: mystring s2 = "testing from char*";
mystring::mystring(const char*):
(mystring*)@ffbef4bc -> 
        dim=19
        len=18
        buf@b5448 -> [testing from char*]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:28: mystring s3 = s2;
mystring::mystring(const mystring&):
(mystring*)@ffbef4ac -> 
        dim=19
        len=18
        buf@b5478 -> [testing from char*]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:29: s1 = s3;
mystring& mystring::operator=(const mystring&):
(mystring*)@ffbef4cc -> 
        dim=128
        len=18
        buf@b5380 -> [testing from char*]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:30: s2 += s3;
mystring& mystring::operator+=(const mystring&):
(mystring*)@ffbef4bc -> 
        dim=37
        len=36
        buf@b54a8 -> [testing from char*testing from char*]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:31: s2 += s3;
mystring& mystring::operator+=(const mystring&):
(mystring*)@ffbef4bc -> 
        dim=55
        len=54
        buf@b54e8 -> [testing from char*testing from char*testing from char*]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:32: cout << "s2.size = " << s2.size() << endl;
s2.size = 54
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:33: mystring s4(10);
mystring::mystring(int):
(mystring*)@ffbef49c -> 
        dim=11
        len=10
        buf@b5540 -> []
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:34: s4 += "foo";
mystring::mystring(const char*):
(mystring*)@ffbef48c -> 
        dim=4
        len=3
        buf@67de0 -> [foo]
mystring& mystring::operator+=(const mystring&):
(mystring*)@ffbef49c -> 
        dim=14
        len=3
        buf@b5568 -> [foo]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:35: s4 += "bar";
mystring::mystring(const char*):
(mystring*)@ffbef47c -> 
        dim=4
        len=3
        buf@67e00 -> [bar]
mystring& mystring::operator+=(const mystring&):
(mystring*)@ffbef49c -> 
        dim=14
        len=6
        buf@b5568 -> [foobar]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:36: s4 += "baz";
mystring::mystring(const char*):
(mystring*)@ffbef46c -> 
        dim=4
        len=3
        buf@67e20 -> [baz]
mystring& mystring::operator+=(const mystring&):
(mystring*)@ffbef49c -> 
        dim=14
        len=9
        buf@b5568 -> [foobarbaz]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:37: mystring* ptr = new mystring( "new mystring" );
mystring::mystring(const char*):
(mystring*)@b5590 -> 
        dim=13
        len=12
        buf@b55b8 -> [new mystring]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:38: delete ptr; ptr = 0;
mystring::~mystring():
(mystring*)@b5590 -> 
        dim=13
        len=12
        buf@b55b8 -> [new mystring]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:39: mystring* leak1 = new mystring( rcsid );
mystring::mystring(const char*):
(mystring*)@b55e0 -> 
        dim=56
        len=55
        buf@b5f40 -> [$Id: teststring.cc,v 330.6 2003-01-23 20:56:51-08 - - $]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:40: mystring* leak2 = new mystring( *leak1 );
mystring::mystring(const mystring&):
(mystring*)@b5608 -> 
        dim=56
        len=55
        buf@b5f90 -> [$Id: teststring.cc,v 330.6 2003-01-23 20:56:51-08 - - $]
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:41: int* leak3 = new int[1024];
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:42: int* leak4 = new int[1024];
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:43: mystring* leak5 = new mystring(1<<16);
mystring::mystring(int):
(mystring*)@b5630 -> 
        dim=65537
        len=65536
        buf@b8010 -> []
------------------------------------------------------------------------

------------------------------------------------------------------------
DEBUG: teststring.cc:44: mystring* leak6 = new mystring();
mystring::mystring():
(mystring*)@b5658 -> 
        dim=128
        len=0
        buf@c8030 -> []
------------------------------------------------------------------------
mystring::~mystring():
(mystring*)@ffbef46c -> 
        dim=4
        len=3
        buf@67e20 -> [baz]
mystring::~mystring():
(mystring*)@ffbef47c -> 
        dim=4
        len=3
        buf@67e00 -> [bar]
mystring::~mystring():
(mystring*)@ffbef48c -> 
        dim=4
        len=3
        buf@67de0 -> [foo]
mystring::~mystring():
(mystring*)@ffbef49c -> 
        dim=14
        len=9
        buf@b5568 -> [foobarbaz]
mystring::~mystring():
(mystring*)@ffbef4ac -> 
        dim=19
        len=18
        buf@b5478 -> [testing from char*]
mystring::~mystring():
(mystring*)@ffbef4bc -> 
        dim=55
        len=54
        buf@b54e8 -> [testing from char*testing from char*testing from char*]
mystring::~mystring():
(mystring*)@ffbef4cc -> 
        dim=128
        len=18
        buf@b5380 -> [testing from char*]
Checking for memory leaks...
  errors are being redirected to file 'testing.errs'

Actual leaks report    (actual leaks:        10  total size:   74033 bytes)

 

Possible leaks report  (possible leaks:       0  total size:       0 bytes)

 
Checking for memory use...
  errors are being redirected to file 'testing.errs'

Blocks in use report   (blocks in use:       24  total size:    2347 bytes)

 
RTC output redirected to logfile 'testing.errs'

execution completed, exit code is 0
